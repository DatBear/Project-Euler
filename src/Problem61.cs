using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography.X509Certificates;

namespace ProjectEuler{
    /*
    Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
    Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
    Square 	  	P4,n=n2 	  	1, 4, 9, 16, 25, ...
    Pentagonal 	  	P5,n=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
    Hexagonal 	  	P6,n=n(2n−1) 	  	1, 6, 15, 28, 45, ...
    Heptagonal 	  	P7,n=n(5n−3)/2 	  	1, 7, 18, 34, 55, ...
    Octagonal 	  	P8,n=n(3n−2) 	  	1, 8, 21, 40, 65, ...

    The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

        The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
        Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
        This is the only set of 4-digit numbers with this property.

    Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
     */
    public class Problem61{
        
        public static void Main(string[] args){
            //28684
            var over1000 = new Func<long, bool>(x => x > 1000);
            var max = 10000;
            var triangle = PolygonalNumbers.TriangleNumbersUnder(max).Where(over1000).ToList();
            var square = PolygonalNumbers.SquareNumbersUnder(max).Where(over1000).ToList();
            var pentagonal = PolygonalNumbers.PentagonalNumbersUnder(max).Where(over1000).ToList();
            var hexagonal = PolygonalNumbers.HexagonalNumbersUnder(max).Where(over1000).ToList();
            var heptagonal = PolygonalNumbers.HeptagonalNumbersUnder(max).Where(over1000).ToList();
            var octagonal = PolygonalNumbers.OctagonalNumbersUnder(max).Where(over1000).ToList();

            pentagonals = new List<List<long>>{
                triangle,
                square,
                pentagonal,
                hexagonal,
                heptagonal,
                octagonal
            };

            var found = false;
            for (var i = 0; i < 1000000 && !found; i++){
                var startList = pentagonals[validListPredicate(i)];
                for (var j = 0; j < startList.Count; j++){
                    var a = i+1;
                    var withNext = new List<long>{startList[j]};
                    while (true){
                        withNext = WithNextCyclicNumber(withNext, a);
                        if (!withNext.Any()){
                            break;
                        }
                        if (withNext.Count > 5){
                            var p3 = withNext.Intersect(triangle);
                            var p4 = withNext.Intersect(square);
                            var p5 = withNext.Intersect(pentagonal);
                            var p6 = withNext.Intersect(hexagonal);
                            var p7 = withNext.Intersect(heptagonal);
                            var p8 = withNext.Intersect(octagonal);
                            Console.WriteLine("5!!");
                            Console.WriteLine(String.Join(",", withNext));
                            Console.WriteLine(withNext.Sum());

                            Console.WriteLine("p3 " + String.Join(",", p3));
                            Console.WriteLine("p4 " + String.Join(",", p4));
                            Console.WriteLine("p5 " + String.Join(",", p5));
                            Console.WriteLine("p6 " + String.Join(",", p6));
                            Console.WriteLine("p7 " + String.Join(",", p7));
                            Console.WriteLine("p8 " + String.Join(",", p8));

                            found = true;
                        }
                        a++;
                    }
                }
                if (i > 0 && (i+1)%pentagonals.Count == 0){
                    pentagonals.Shuffle();
                }
            }



            //Console.WriteLine(AreCyclic(2, 8128, 2882, 8281));
            //Console.WriteLine(AreCyclic(2, 1234, 3456, 5611));

        }

        private static List<List<long>> pentagonals;

        private static Func<int, int> validListPredicate =
            (i =>{
                while (i >= pentagonals.Count){
                    i -= pentagonals.Count;
                }
                return i;
            });

        private static List<long> WithNextCyclicNumber(List<long> numbers, int i){
            var nextList = pentagonals[validListPredicate(i)];
            for (var j = 0; j < nextList.Count; j++){
                if (!numbers.Contains(nextList[j])){
                    var list = new List<long>(numbers);
                    list.Add(nextList[j]);
                    if (list.Count <= 5 && AreStartOfCycle(2, list.ToArray())) {
                        return list;
                    } else if (list.Count == 6 && AreCyclic(2, list.ToArray())) {
                        return list;
                    }
                }
            }

            return new List<long>();
        }

        private static bool AreCyclic(int numDigits, params long[] numbers){
            for (var i = 0; i < numbers.Count(); i++){
                var currentDigits = Number.Digits(numbers[i]);
                IList<int> nextDigits;
                if (i < numbers.Count() - 1){
                    nextDigits = Number.Digits(numbers[i + 1]);
                } else{
                    nextDigits = Number.Digits(numbers[0]);
                }

                for (var j = 0; j < numDigits; j++){
                    if (currentDigits[currentDigits.Count - numDigits + j] != nextDigits[j]){
                        return false;
                    }
                }
            }
            return true;
        }

        private static bool AreStartOfCycle(int numDigits, params long[] numbers){
            for (var i = 0; i < numbers.Count() - 1; i++){
                var currentDigits = Number.Digits(numbers[i]);
                IList<int> nextDigits = Number.Digits(numbers[i + 1]);

                for (var j = 0; j < numDigits; j++){
                    if (currentDigits[currentDigits.Count - numDigits + j] != nextDigits[j]){
                        return false;
                    }
                }
            }
            return true;
        }
    }
}